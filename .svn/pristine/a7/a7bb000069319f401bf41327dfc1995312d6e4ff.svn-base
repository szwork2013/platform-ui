import React from 'react';
import { InputNumber, Input } from 'antd';

import {
  View,
  DropdownSelect
} from 'components';

import service from 'service';

import MaterialSelect from '../MaterialSelect'

import modelDefinition from './model';

//取得模型名称
const modelName = modelDefinition.namespace;

//权限定义表单
class PlanItems extends React.Component {

  componentDidMount() {

  }

  render() {
    const { record, planType, canEdit } = this.props;
    const user = service.userInfo.user;

    //定义操作条属性
    let buttons = undefined;
    //公司属性不定义新增
    if (canEdit)
      if (planType == 1 || planType == 2)
        buttons = [{ title: '新增', OnClick: () => this.newItem() }];
    const actionBarProps = {
      newRow: false,
      new: false, //显示新增按钮
      delete: planType < 3 ? true : false, //显示删除按钮
      saveTable: planType != 0 ? true : false,
      reloadTable: planType != 0 ? true : false,
      buttons,
    }

    //翻页器属性
    const paginationBarProps = {};


    //定义搜索条件
    let recordId = service.getRecordId(record);
    //默认根据部门计划查询。
    let where = 'o.departmentPlan.id=' + recordId;
    //根据公司计划或者单位计划
    if (planType < 2) {
      where = 'o.demandPlan.id=' + recordId;
    }
    //根据采购计划
    if (planType == 3) {
      where = 'o.purchasePlan.id=' + recordId;
    }
    const searchParam = {
      filter: { //过滤规则
        clazz: 'PlanItem', //模型对应的后台实体类
        where: where, //条件
      },
      size: 100, //指定每页记录数
      sort: 'o.id,asc', //缺省排序规则
    };

    //定义选人下拉框的查询参数
    const selectProps = {
      type: 'list',
      labelKey: 'name',
      modelName: 'users',
      searchParam: {
        filter: { //过滤规则
          clazz: 'SysUser', //模型对应的后台实体类
          where: 'o.org.id=' + user.org.id, //条件
        },
        size: 100, //指定每页记录数
        sort: 'o.id,asc', //缺省排序规则
      },
      onSelect: (value, option, record) => {
        record.userName = option.props.dataRef.name;
      }
    };

    //定义列表属性
    let columns = [ // 和antd table组件的列定义相同
      { title: '名称', width: 150, dataIndex: 'materialData.name', key: 'materialData.name' },
      { title: '规格', width: 250, dataIndex: 'materialData.specification', key: 'materialData.specification' },
      { title: '数量', width: 125, dataIndex: 'demandQuantity', key: 'demandQuantity', editor: <Input placeholder='请填写数字值' /> },
      { title: '单位', width: 100, dataIndex: 'materialData.measurementUnit', key: 'materialData.measurementUnit' },
      { title: '单价', width: 125, dataIndex: 'materialData.priceWithTax', key: 'materialData.priceWithTax' },
      {
        title: '使用人', width: 145, dataIndex: 'user', key: 'user', type: 'select',
        textRender: (value, record) => {
          if (record.userId) {
            let href = service.constructRecordUrl({ modelName: 'users', id: record.userId });
            record.user = href ? href : '';
          }
          return record.userName || '***';
        },
        editor: <DropdownSelect {...selectProps} />
      },
      { title: '备注', width: 145, dataIndex: 'remarkx', key: 'remark', editor: <Input /> },
    ];
    const listProps = {
      columns,
      rowSelection: { type: 'checkbox' }, //选择功能配置
      groupKey:'orgId',
      groupRecordFunc:this.computeGroupRecord,
    };

    //显示UI
    return (
    <View key={'material'+'ViewLayout'} {...this.props}
      editMode={canEdit&&planType!=0?'row':false} //编辑模式：单行编辑
      searchParam={searchParam}
      heightOffset={-60}
      modelName={modelName} //模型名称
      actionBar={actionBarProps} //操作条定义
      list={listProps} //列表定义
      uid={recordId}
      paginationBar={paginationBarProps}
      />
    )
  }

  //计算分组行的
  computeGroupRecord=(list)=>{
    if(!list||list.length==0) return undefined;
    let newRecord={};
    let firstOne=list[0];
    newRecord.materialData={};
    //在名称上设置分组行的名称，在规格上设置合计信息
    newRecord.materialData.name=firstOne.org.name;
    let totalAmount=0;
    list.map((item)=>{
      totalAmount=totalAmount+(item.demandQuantity*item.materialData.priceWithTax*(1-item.materialData.taxRate));
    });
    newRecord.materialData.specification='总金额(不含税):'+totalAmount+'元';
  }

  //新增行
  newItem = () => {
    const { record, dispatch, year, type, planType } = this.props;

    let where = 'o.year=' + year + ' and o.type=' + this.convertType(type);
    let searchParam = { //搜索条件
      filter: {
        where,
      },
      linkAttrs: [],
      size: 20, //指定每页记录数
    };

    let formProps = service.constructPropsOfForm('material', record);
    formProps.record = record;
    formProps.searchParam = searchParam;
    formProps.objPropName = '_planItems';

    let recordUrl = service.getHrefOfLinkAttr(record);
    let recordId = service.getRecordId(record);


    //默认部门计划。
    let foreignKey = 'departmentPlan';
    //公司计划或者单位计划
    if (planType < 2) {
      foreignKey = 'demandPlan';
    }
    //采购计划计划
    if (planType == 3) {
      foreignKey = 'purchasePlan';
    }

    //发送消息显示对话框
    dispatch({
      type: 'modaldialog/show',
      payload: {
        iconType: 'info-circle-o',
        title: '选择IT耗材',
        content: <MaterialSelect {...formProps} />,
        onOk: () => {
          dispatch({ type: 'modaldialog/save', payload: { visible: false } });
          dispatch({
            type: 'plan_item/addRows',
            payload: {
              rows: record[formProps.objPropName],
              dataKey: recordId,
              planUrl: recordUrl,
              foreignKey,
            }
          });
        },
        style: "width:800px !important;",
      }
    });
  }

  convertType = (type) => {
    if (type == 'IT_CONSUMABLE') return 0;
    if (type == 'OFFICE_EQUIPMENT') return 1;
    if (type == 'NON_INSTALLATION_EQUIPMENT') return 2;
    if (type == 'PRODUCTION_EQUIPMENT') return 3;
    if (type == 'ENGINEERING_MATERIALS') return 4;
    if (type == 'OFFICE_SUPPLIES') return 5;
  }

}
//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({ plan_item, loading }) =>
  ({ plan_item, loading: loading.models[modelName] })
)(PlanItems);
