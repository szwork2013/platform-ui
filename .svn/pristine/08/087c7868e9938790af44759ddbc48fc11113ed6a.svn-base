import {Col, Input , Button, Icon, Popover} from 'antd';
import { Form as FormLayout, FormItem } from 'components';
import config from 'config';


const FormContainer = FormLayout.FormContainer;
const Form = FormContainer.StyledForm;
const Row = FormContainer.StyledRow;
const Search = Input.Search;
const { api } = config; //取得RESTful api配置信息
let {rootPath} = api;
rootPath = rootPath.substring(0,rootPath.length-4);




//选项设置表单
const OptionsForm = ( props ) => {
  //解构参数
  let {
    yearOptions,
    conditionData={}, //条件数据
  } = props;

  const exporthref = (conditionData.month) ?
    `${rootPath}/indicator_monthlyindicator/exportExcel?year=` + conditionData.year + `&month=` + conditionData.month :
    `${rootPath}/indicator_monthlyindicator/exportExcel?year=` + conditionData.year;

  //构造FormItem的公共参数
  const oneItemWidth = ['96%','10%','90%'];

  const { getFieldDecorator, setFieldsValue } = props.form;
  const itemProps = {
    canEdit: true, getFieldDecorator,setFieldsValue, width: oneItemWidth,
    controlProps:{allowClear:true}, required: false,
  };

  return (
    <Form layout='inline' style={{height:'44px'}}>
      <Row>
        <Col span={2}>
          {getExportExcel(exporthref)}
        </Col>
        <Col span={3}>
          {renderYearSelect(yearOptions)}
        </Col>
        <Col span={3}>
          {renderMonthSelect()}
        </Col>
        <Col span={5}>
          {renderDeptSelect()}
        </Col>
        <Col span={3}>
          {renderFilterSelect()}
        </Col>
      </Row>
    </Form>
  )


  //构造年度选择组件
  function renderYearSelect() {
    //构造年度的选项
    let date=new Date();
    let curYear=date.getFullYear();
    let options=[];
    for(let i=0;i<yearOptions.length;i++){
      let option={'id':yearOptions[i],'name':yearOptions[i]};
      options.push(option);
    }
    return(
      <FormItem type='Select' initialValue={conditionData.year}  required={false}
                title='' options={options} {...itemProps} itemKey='year' placeholder='选择年度'
      />
    );


  }

  //构造月份选择组件
  function renderMonthSelect() {
    //构造月度的选项
    //构造年度的选项
    let date=new Date();
    let monthOptions=[];
    for(let i=12;i>0;i--){
      let option={'id':i,'name':i+'月'};
      monthOptions.push(option);
    }

    return(
      <FormItem type='Select' initialValue={conditionData.month} width={oneItemWidth} required={false}
                title='' options={monthOptions} {...itemProps} itemKey='month' placeholder='选择月份'
      />
    );
  }

  //构造月份选择组件
  function renderDeptSelect() {
    return(
      <FormItem type='Select' {...itemProps}  initialValue={conditionData.dept&&conditionData.dept.href} placeholder='选择部门'
                itemKey='dept' onSelect={onDeptSelect}
                labelKey='orgName' modelName='orgs' searchParam={{
        filter:{
          where: 'o.type=2'
        },
        size:1000,
        sort: ['o.type,asc','o.sortNo,asc']
      }}
      />
    );
  }

  //构造关键字过滤组件
  function renderFilterSelect() {
    return(
      <Search
        placeholder="请输入过滤指标关键字"
        onSearch={value => props.dispatch({
          type: 'indicator_report/changeConditionData',
          payload: {value}
        })}
        style={{ width: 200 }}

      />
    );
  }

  //构造Excel导出
  function getExportExcel(exporthref) {

    return(
      <a href={exporthref}>
        <Button type="primary">导出</Button>
      </a>
    );
  }

  //使用部门选中事件处理
  function onDeptSelect(value, node) {
    let record = node.props.dataRef;
    let dept = {
      id: record.id,
      name: record.orgName,
      href: value,
    }
    //发消息通知模型条件发生变化
    props.dispatch({
      type: 'indicator_report/changeConditionData',
      payload: {dept}
    });
    return true;
  }


}




//表单字段被修改事件处理
const onFieldsChange = (props, fields) => {
  //解构参数
  const {
    dispatch,
  } = props;

  let changed = false;
  let changedData = {};
  for(let x in fields) {
    if ((x=='dept') &&
      fields[x].value) {
      continue;
    }
    changedData[fields[x].name] = fields[x].value;
    changed = true;
  }
  if (changed) {
    //发消息通知模型条件发生变化
    dispatch({
      type: 'indicator_report/changeConditionData',
      payload: {...changedData}
    })
  }
}

import { Form as AntdForm } from 'antd';
const antdOptionsForm = AntdForm.create({
  onFieldsChange: onFieldsChange
})(OptionsForm);

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({
                          indicator_report:{conditionData,yearOptions}
                        }) =>
  ({conditionData,yearOptions})
)(antdOptionsForm);
