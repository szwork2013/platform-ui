import React from 'react';
import {InputNumber,Input } from 'antd';

import {
  View,
  DropdownSelect
} from 'components';

import service from 'service';

import MaterialSelect from '../MaterialSelect'

import modelDefinition from './model';

//取得模型名称
const modelName = modelDefinition.namespace;

//权限定义表单
class PlanItems extends React.Component{

  componentDidMount() {

  }

  render(){
    const user = service.userInfo.user;
    //定义操作条属性
    const actionBarProps = {
      newRow:false,
      new: false, //显示新增按钮
      delete: true, //显示删除按钮
      saveTable:true,
      reloadTable:true,
      buttons:[{title:'新增',OnClick:()=>this.newItem()}]
    }

    //翻页器属性
    const paginationBarProps = {};

    const {record} = this.props;
    let recordId=service.getRecordId(record);
    //定义搜索条件
    const searchParam = {
      filter: { //过滤规则
        clazz: 'PlanItem', //模型对应的后台实体类
        where: 'o.departmentPlan.id='+recordId, //条件
      },
      size: 100, //指定每页记录数
      sort: 'o.id,asc', //缺省排序规则
    };

    const selectProps = {
      type: 'list',
      labelKey: 'name',
      modelName:'users',
      searchParam:{
        filter: { //过滤规则
          clazz: 'SysUser', //模型对应的后台实体类
          where: 'o.org.id='+user.org.id, //条件
        },
        size: 100, //指定每页记录数
        sort: 'o.id,asc', //缺省排序规则
      }

    };
    let columns=[ // 和antd table组件的列定义相同
      { title: '名称', dataIndex: 'material.name', key: 'material.name'},
      { title: '规格', width: 250, dataIndex: 'material.specification', key: 'material.specification'},
      { title: '供应商',width: 120, dataIndex: 'material.supplier.name', key: 'supplier.name'},
      { title: '数量', width: 145, dataIndex: 'demandQuantity', key: 'demandQuantity',editor:<Input/>},
      { title: '单位', width: 145, dataIndex: 'material.measurementUnit', key: 'material.measurementUnit'},
      { title: '单价', width: 145, dataIndex: 'material.priceWithTax', key: 'material.priceWithTax' },
      { title: '使用人', width: 145, dataIndex: 'user', key: 'user',type:'select',
        textRender: (text,record)=>record.userName||'***',
        editor: <DropdownSelect {...selectProps} />},
      { title: '备注', width: 145, dataIndex: 'remarkx', key: 'remark' },
    ];
    //定义列表属性
    const listProps = {
      columns,
      rowSelection: {type:'checkbox'}, //选择功能配置
    };

//显示UI
    return (
      <View key={'material'+'ViewLayout'} {...this.props}
            editMode='row' //编辑模式：单行编辑
            searchParam={searchParam}
            heightOffset={-60}
            modelName={modelName} //模型名称
            actionBar={actionBarProps} //操作条定义
            list={listProps} //列表定义
            uid={recordId}
            paginationBar={paginationBarProps}
      />
    )
  }

  newItem=()=>{
    const {record, dispatch, year,type} = this.props;

    let where = 'o.year='+year+' and o.type='+this.convertType(type);

    let searchParam={ //搜索条件
      filter: {
        where,
      },
      linkAttrs:[],
      size: 20, //指定每页记录数
    };

    let formProps = service.constructPropsOfForm('material', record);
    formProps.record=record;
    formProps.searchParam=searchParam;
    formProps.objPropName='_planItems';

    let recordUrl=service.getHrefOfLinkAttr(record);
    let recordId=service.getRecordId(record);

    //发送消息显示对话框
    dispatch({
      type:'modaldialog/show',
      payload: {
        iconType: 'info-circle-o',
        title: '选择IT耗材',
        content: <MaterialSelect {...formProps} />,
        onOk: () => {
          dispatch({type:'modaldialog/save',payload:{visible:false}});
          dispatch({
            type:'plan_item/addRows',
            payload:{
              rows:record[formProps.objPropName],
              dataKey:recordId,
              planUrl:recordUrl
            }});
        },
        style: "width:800px !important;",
      }
    });
  }

  convertType=(type)=>{
    if(type=='IT_CONSUMABLE') return 0;
    if(type=='OFFICE_EQUIPMENT') return 1;
    if(type=='NON_INSTALLATION_EQUIPMENT') return 2;
    if(type=='PRODUCTION_EQUIPMENT') return 3;
    if(type=='ENGINEERING_MATERIALS') return 4;
    if(type=='OFFICE_SUPPLIES') return 5;
  }

}
//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({plan_item, loading}) =>
  ({plan_item, loading: loading.models[modelName]})
)(PlanItems);
