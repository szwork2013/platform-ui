import React from 'react';

import { Input, Checkbox, Select, InputNumber } from 'antd';
import { View, DropdownSelect } from 'components';
import service from  'service'
import modelDefinition from '../model';
const Option = Select.Option;
//取得模型名称
const modelName = modelDefinition.namespace;

const ViewComponent = (props) => {

  //定义操作条属性
  const actionBarProps = {
    new: false, //显示新增按钮
    delete: false, //显示删除按钮
  }
  let searchParam = { //搜索条件
    filter: { //过滤规则
      clazz: 'SheetCol', //模型对应的后台实体类
      where: '1=1', //条件
    },
    size: 20, //指定每页记录数
    sort: 'o.id,desc' //缺省排序规则
  }
    const sheetProps = {
      type:'list',
      labelKey: 'name',
      modelName: 'budget_sheet',
      searchParam: {
        filter: {
          where:'',
        },
        size:1000,
      },
    };   

  //类型选项
  const typeProps = {
    type: 'list',
    labelKey: 'name',
    options: [{ id: '0', name: '本年预算' }, { id: '1', name: '本年累计完成' },
    { id: '2', name: '本年全年预计完成' }, { id: '3', name: '下年预算' },
    { id: '99', name: '备注' }]
  };
  function typeRender(value, record) {
    const array=typeProps.options;
    if(value||value==0){
      for(let i=0;i<array.length;i++){
        if(value==array[i].id){
            return array[i].name;
        }
      }
    }
  }
  //使用类型选项
  const useTypeProps = {
    type: 'list',
    labelKey: 'name',
    options: [{ id: '0', name: '其他业务支出' }, { id: '1', name: '管理费用' },
    { id: '2', name: '营业外支出' }]
  };
  function useTypeRender(value, record) {
    const array=useTypeProps.options;
    if(value||value==0){
      for(let i=0;i<array.length;i++){
        if(value==array[i].id){
            return array[i].name;
        }
      }
    }
  }
  //值类型选项
  const valueTypeProps = {
    type: 'list',
    labelKey: 'name',
    options: [{ id: '0', name: '初始' }, { id: '1', name: '平衡' },
    { id: '2', name: '分解' },{ id: '3', name: '中间' },{ id: '4', name: '指标' }]
  };
function valueTypeRender(value, record) {
   const array=valueTypeProps.options;
   if(value||value==0){
     for(let i=0;i<array.length;i++){
       if(value==array[i].id){
           return array[i].name;
       }
     }
   }
}
  //定义列表属性
  const listProps = {
    columns: [ // 和antd table组件的列定义相同
      { title: '名称', width: 160, dataIndex: 'name', key: 'name', editor: <Input />},
      {type:'select', title: '表名', width: 180, dataIndex: 'sheet', key: 'sheet',
        fulltext: 'sheet.name',
        editor:<DropdownSelect {...sheetProps} />,
        textRender:(value,record)=>{
              if (record.sheetId){
                 let href = service.constructRecordUrl({modelName:'budget_sheet', id:record.sheetId});
                 record.sheet = record.sheet?record.sheet:href;
              }
          return record.sheetName
        },
      },
      { title: 'exCol', width: 80, dataIndex: 'exCol', key: 'exCol', editor: <Input />}, 
      { title: '跨行', width: 50, dataIndex: 'rowspan', key: 'rowspan', editor: <Input />},    
      { title: '跨列', width: 50, dataIndex: 'colspan', key: 'colspan', editor: <Input />},    
      { title: '层级', width: 50, dataIndex: 'level', key: 'level', editor: <Input />},    
      { title: '列类型',type:'select', width: 160, dataIndex: 'type', key: 'type', editor: <DropdownSelect {...typeProps}/>,textRender:typeRender},      
      { title: '使用类型',type:'select',  width: 130, dataIndex: 'useType', key: 'useType', editor: <DropdownSelect {...useTypeProps}/>,textRender:useTypeRender},
      { title: '值类型', type:'select', width: 100, dataIndex: 'valueType', key: 'valueType', editor: <DropdownSelect {...valueTypeProps}/>,textRender:valueTypeRender },
      { title: '计算公式', width: 200, dataIndex: 'formula', key: 'formula', editor: <Input /> },
      { title: '机构', width: 100, dataIndex: 'deptId', key: 'deptId', editor: <Input /> },
      { title: '权限编码', width: 100, dataIndex: 'aclCode', key: 'aclCode', editor: <Input /> },
    ],
  };

  //翻页器属性
  const paginationBarProps = {};

  return (
    <View key={modelName + 'ViewLayout'} {...props}
          editMode='row' //编辑模式：单行编辑
          modelName={modelName} //模型名称
          searchParam={searchParam}
          actionBar={actionBarProps} //操作条定义
          list={listProps} //列表定义
          paginationBar={paginationBarProps}
    />
  )
}

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({ sheetcol, loading }) =>
  ({ sheetcol, loading: loading.models[modelName] })
)(ViewComponent);
