import { Input, DatePicker } from 'antd';
import { View, DropdownSelect, Tree } from 'components';

//获取模型名称
import modelDefinition from '../model';
const modelName = modelDefinition.namespace;

import service from 'service';

const ViewComponent = (props) => {

  const actionBarProps = {
    new: false, //显示新增按钮
    delete: true, //显示删除按钮
    newRow: true,
  }
  let searchParam = { //搜索条件
    filter: { //过滤规则
      where: '1=1', //条件
    },
    size: 20, //指定每页记录数
    sort: 'o.id,desc' //缺省排序规则
  }

  const deptTree = orgTreeProps();
  const typeSelect=typeProps();

  //定义列表属性
  const listProps = {
    columns: [
      { title: 'ERP部门编码 ', width: 160, dataIndex: 'erpOrgCode', key: 'erpOrgCode', sorter: true, editor: <Input /> },
      { title: 'ERP部门名称 ', width: 200, dataIndex: 'erpOrgName', key: 'erpOrgName', sorter: true, editor: <Input /> },
      { title: '类型', width: 100, dataIndex: 'type', key: 'type', sorter: true, editor: <DropdownSelect {...typeSelect} />,textRender:typeTextRender },
      { title: '预算填报部门', width: 200, dataIndex: 'orgMatchDept', key: 'orgMatchDept', sorter: true, },
      { title: '所属单位', dataIndex: 'unit', key: 'unit', sorter: true,
       editor: <DropdownSelect {...deptTree} />,textRender: (value, record)=>record.orgName },
    ],
    rowSelection: {},
  };
  //翻页器属性
  const paginationBarProps = {};
  return (
    <View key={modelName + 'ViewLayout'} {...props}
      editMode='row' //编辑模式：单行编辑
      modelName={modelName} //模型名称
      searchParam={searchParam}
      actionBar={actionBarProps} //操作条定义
      list={listProps} //列表定义
      paginationBar={paginationBarProps}
    />
  )

}
//构造机构树的属性
function orgTreeProps() {
  const props = props;
  const treeProps = {
    type: 'tree',
    labelKey: 'orgName',
    modelName: 'orgs',
    searchParam: {
      filter: {
        where: '1=1'
      },
      sort: ['o.sortNo,asc'],
    },
  };
  return treeProps;
}
//构造类型的属性
function typeProps() {
  const props = props;
  const typesProps = {
    type: 'list',
    labelKey: 'name',
    options: [{ id: 0, name: '成本中心' }, { id: 1, name: '利润中心' },]
  };
  return typesProps;
}
function typeTextRender(value, record) {
  if (value === 0) {
    return '成本中心';
  } else if (value === 1) {
    return '利润中心';
  }

}
//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({ budget_org_match, loading, apptabs: { tabs } }) =>
  ({ budget_org_match, loading: loading.models[modelName], tabs })
)(ViewComponent);
