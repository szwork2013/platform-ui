import React from 'react';

import {message} from 'antd';

import ActionBar from './ActionBar'
import List from './List'
import PaginationBar from './PaginationBar';

//导入styled组件
import {
  StyledViewDiv,
  theme,
} from './styled';

//列表框架
class View extends React.Component {
  constructor(props) {
    super(props);
    //设置标记：未发送请求数据的请求
    this.initQuery = false;
  }

  componentDidMount() {
    //解构参数
    const {
      notQueryData = false,
      modelName,
      match,
      where = '',
      sort = '',
      searchParam = '',
      uid,
      onInitQuery, //初始化时发送的请求
      dispatch,
    } = this.props;

    //获取路由注入的queryType
    let queryType = undefined;
    if (match && match.params) {
      queryType = match.params.queryType
    }

    //发消息请求数据
    !notQueryData && dispatch({
      type: modelName+'/query',
      payload: {
        queryType,
        where,
        sort,
        searchParam,
        initQuery: true,
        dataKey:uid,
      }
    });

    if (onInitQuery) {
      onInitQuery({searchParam});
    }

    //设置已发送初始的数据请求
    this.initQuery = true;
  }

  render() {
    const props = this.props;

    //解构参数
    const {
      editMode, //编辑模式
      list, //列表参数
      actionBar, //操作条参数
      modelName, //模型名称
      tabs, //tab数组
      dispatch,
      loading,
      appTheme, //应用皮肤定义
      heightOffset, //高度调整量
      onSearch, //检索事件处理
      preventDefaultOnSearch, //阻止缺省的OnSearch事件处理
      uid, //多个视图使用一个模型
    } = props;

    //获取对应的模型
    let model = props[modelName];
    if (!model) {
      message.info('从属性中无法获得名称为"'+modelName+'"的模型数据！');
      return null;
    }

    if (!this.initQuery||!loading&&!model.list&&!model.viewData) return null;

    //获取翻页器参数
    theme.hasPaginationBar = props.paginationBar == false ? false : true;
    const paginationBar = props.paginationBar || {};

    //设置是否有操作条
    theme.hasActionBar = actionBar ? true : false;

    //操作条参数
    const actionBarProps = {
      editMode,
      actionBar,
      fulltextFields: this.getFullTextFields(list.columns),
      modelName,
      model,
      dispatch,
      appTheme,
      onSearch,
      preventDefaultOnSearch,
      uid,
    }

    //列表参数
    const listProps = {
      treedata: model.searchParam && model.searchParam.treedata,
      editMode,
      list,
      model,
      modelName,
      tabs,
      dispatch,
      loading,
      appTheme,
      heightOffset,
      uid,
    }

    //翻页器参数
    const paginationBarProps = {
      paginationBar,
      model,
      modelName,
      dispatch,
      appTheme,
      uid,
    }

    return (
      <StyledViewDiv key={modelName+'View'}>
        {/*操作条div*/}
        {
          props.actionBar!=false &&
          <ActionBar key={modelName+'ViewActionBar'} {...actionBarProps}/>
        }

        {/*列表div*/}
        <List key={modelName+'ViewList'} {...listProps}/>

        {/*翻页器*/}
        {
          props.paginationBar!=false &&
          <PaginationBar key={modelName+'PaginationBar'} {...paginationBarProps} />
        }
      </StyledViewDiv>
    )
  }

  //获取纳入全文检索的字段名
  getFullTextFields = (columns) => {
    let fields = [];
    for (let col of columns) {
      if (col.fulltext != false) {
        let key = col.fulltext!=true&&col.fulltext?col.fulltext:col.key;
        fields.push({key: key, title: col.title}); 
      }
    }

    return fields;
  }
}

import PropTypes from 'prop-types';
View.propTypes = {
  actionBar: PropTypes.object,
  list: PropTypes.object,
  editMode: PropTypes.string,
  modelName: PropTypes.string.isRequired,
  notQueryData: PropTypes.bool,
  dispatch: PropTypes.func.isRequired,
  match: PropTypes.object,
}

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({webapp:{theme}}) =>
  ({appTheme:theme})
)(View);