import { Input, Checkbox, InputNumber } from 'antd';

import {
  View
} from 'components';

import service from 'service';

const ViewComponent = ( props ) => {
  	//解构参数
	let {
    model,
    searchParam,
    record,
    linkPropName,//要设置的字段link值名称
    objPropName,//要设置的对象的属性名称
    canEdit = true, //FormContainer注入：是否可编辑
    dispatch
	} = props;
  const userLink = service.userInfo.user.selfLink;

  //定义操作条属性
  const actionBarProps = {
    new: false, //显示新增按钮
    delete: false, //显示删除按钮
    newRow: true,
    saveTablePayloadRender: (model) => (
        {defaultValues: {user: userLink}}
      )
  }

  //定义列表属性
  const listProps = {
    columns:[ // 和antd table组件的列定义相同
      { title: '名称', width:'85', dataIndex: 'user.name', key: 'user.name',
        textRender:(v, r) => r.name
      },
      { title: '开户银行',width:'250', dataIndex: 'bank', key: 'bank', editor:<Input/>},
      { title: '银行账号', dataIndex: 'bankno', key: 'bankno', editor:<Input/>},
      { title: '联系电话',width:'130',  dataIndex: 'telephone', key: 'telephone', editor:<Input/>},
    ],
    rowSelection: {type:'radio', onSelect: handleOnRowSelect}, //选择功能配置
  };

  //翻页器属性
  const paginationBarProps = {reloadButton:false};

  return (
    <View key={'userbankinfo'+'ViewLayout'} {...props}
      searchParam={searchParam}
      heightOffset={-160}
      editMode='row' //编辑模式：单行编辑
      modelName='userbankinfo' //模型名称
      actionBar={actionBarProps} //操作条定义
      list={listProps} //列表定义
      paginationBar={paginationBarProps}
    />
  )

  //处理视图行被选中事件
  function handleOnRowSelect(record, selected, selectedRows) {
    const {record: execution} = model;
    execution[objPropName]  = record;
    execution[linkPropName] = service.parseRecordUrl(record);
  }
}

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({userbankinfo, loading, apptabs:{tabs}}) =>
  ({userbankinfo, loading: loading.models['userbankinfo'], tabs})
)(ViewComponent);
