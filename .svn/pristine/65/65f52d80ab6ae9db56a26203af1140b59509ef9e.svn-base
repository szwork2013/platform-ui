import {routerRedux} from 'dva/router';
import lodash from 'lodash';

import {Button} from 'antd';
import { View } from 'components';

import StatInfo from '../../../queryform/QueryForm/ViewGrid/ResultStatInfo';

import {accountingNumberFormat} from 'utils';
import service from 'service';
import * as executionService from '../../../execution/service';

import {constructBudgetSource} from '../../service';
import Form from '../../../execution/Form';

//结果视图
const ResultView = ( props ) => {
  const {expenditureType, conditionData, dispatch} = props;
  const stateOptions = [
    { 'id': 1, key: 'DRAFT', 'name': '草稿' },
    { 'id': 2, key: 'BUDGET_CHECK', 'name': '预算检查' },
    { 'id': 3, key: 'COMPANY_APPROVAL', 'name': '公司审批' },
    { 'id': 4, key: 'TENDER', 'name': '招标' },
    { 'id': 5, key: 'PICKETAGE', 'name': '定标' },
    { 'id': 6, key: 'CONTRAC_CHECK', 'name': '合同审查' },
    { 'id': 7, key: 'CONTRAC_NO', 'name': '合同编号' },
    { 'id': 8, key: 'PAYMENT', 'name': '支付报销' },
    { 'id': 9, key: 'END', 'name': '办结' },
    { 'id': 0, key: 'ANNUL', 'name': '废止' },
  ];

  //定义操作条属性
  const actionBarProps = {
    new: false, //显示新增按钮
    delete: false, //显示删除按钮
    newRow: false,
    buttons: renderNewButtons()
  }

  //定义列表属性
  const listProps = {
    scrollx: 1275,
    columns: [   
      {
        title: '项目名称',
        width: 120,
        dataIndex: 'fundSource.name',
        key: 'fundSource.name',
        link: 'open',
        sorter: true,
        
        textRender: (text, record) => {
          return record.fundSourceName
        }
      },
      {
        title: '事项名称',
        width: 260,
        dataIndex: 'projectName',
        key: 'projectName',
        link: 'open',
        textRender: projectNameRender,
        sorter: true,
        
      },
      {
        title: '科目',
        width: 60,
        dataIndex: 'categoryFullNo',
        key: 'categoryFullNo',
        textRender: categoryNoRender,
        fulltext: false,
      },
      {
        title: '创建人',
        width: 80,
        dataIndex: 'createdByName',
        key: 'createdByName',
      },
      {
        title: '创建时间',
        width: 155,
        dataIndex: 'createdTime',
        key: 'createdTime',
      },      
      {
        title: '预算(元)',
        width: 100,
        dataIndex: 'budget',
        key: 'budget',
        sorter: true,
        fulltext: false,
        textRender: (value) => {
          if (!value)
            return '0.00';
          return accountingNumberFormat(value);
        },
        className: 'xpiui-view-col-right'
      },
      {
        title: '合同(元)',
        width: 100,
        dataIndex: 'biddingresultMoney',
        key: 'biddingresultMoney',
        sorter: true,
        fulltext: false,
        textRender: (value) => {
          if (!value)
          return '0.00';
          return accountingNumberFormat(value);
        },
        className: 'xpiui-view-col-right'
      },
      {
        title: '结算(元)', 
        width: 100,
        dataIndex: 'settlementMoney', //2017-12-21 原来结算金额字段为settlement 会导致视图显示不正常,会和其他列合并 有可能是该字段
        key: 'settlementMoney',       //和react关键字冲突,具体原因不详,改为settlementMoney显示正常
        sorter: true,
        fulltext: false,
        textRender: (value) => {
          if (!value)
          return '***';
          return accountingNumberFormat(record.settlementMoney);
        },
        className: 'xpiui-view-col-right'
      },
      {
        title: '审定(元)',
        width: 100,
        dataIndex: 'approve',
        key: 'approve',
        sorter: true,
        fulltext: false,
        textRender: (value) => {
          if (!value)
          return '***';
          return accountingNumberFormat(value);
        },
        className: 'xpiui-view-col-right'
      },
      {
        title: '已支付(元)',
        width: 100,
        dataIndex: 'paymentTotal',
        key: 'paymentTotal',
        sorter: false,
        fulltext: false,
        textRender: (value) => {
          if (!value)
          return '***';
          return accountingNumberFormat(value);
        },
        className: 'xpiui-view-col-right'
      },
      {
        title: '审批状态', dataIndex: 'state', key: 'state', sorter: true,
        textRender: colTextRenderOfState,
        className: 'xpiui-view-col-center',
      },
    ]
  };

  //翻页器属性
  const paginationBarProps = {
    controlProps:{
      simple:true,
    }, 
    reloadButton:false,
  };

  return (
    <div>
      <View {...props}
        notQueryData={true}
        actionBar={actionBarProps} //操作条定义
        list={listProps} //列表定义
        paginationBar={paginationBarProps}
        onSearch={handleOnSearch}
      />
      <StatInfo uid='DraftFormViewStatInfo' totalTitle='本部门' bottom={5}/>
    </div>
  )

  //构造新建按钮组件
  function renderNewButtons() {
    let canStart = conditionData.category&&conditionData.year&&conditionData.fundSource;
    if (expenditureType!='operating') {
      canStart = conditionData.category&&conditionData.fundSource;
    }

    return(
      <span>
        {service.authz('exp.create') && <Button style={{marginLeft:10}} onClick={()=>handleNewButtonClick(1)} disabled={!canStart} icon='plus' type="primary">新费用立项申请</Button>}
        {service.authz('exp.create') && <Button style={{marginLeft:10}} onClick={()=>handleNewButtonClick(2)} disabled={!canStart} icon='api' type="danger">新合同立项申请</Button>}
      </span>
    );
  }

  //发起申请按钮点击事件处理
  function handleNewButtonClick(type) {
    let fundSource = conditionData.fundSource;
    let category = conditionData.category;
    let usePermission = conditionData.usePermission||2;
    let record = {
      fundSource:fundSource.href,
      _fundSource: fundSource,
      budgetSource:constructBudgetSource(conditionData),
      year: conditionData.year,
      category: category.href,
      _category: category,
      usePermission,
      type,
    };

    let origin = lodash.cloneDeep(record);
    let model = {record, state:{mode:'new', origin}}

    //发消息发起申请
    dispatch({
      type: 'expenditure_executions/new',
      payload: {
        model,
        processNo:type==2?'contractFlowV2':'costFlowV2'
      }
    })
  }

  //处理清除按钮点击事件
  function handleClearButtonClicked() {
    props.dispatch(
      routerRedux.push({
        pathname: service.curPath
      })
    );
  }

  //处理按钮条检索事件
  function handleOnSearch({where}) {
    //发消息通知模型条件发生变化
    props.dispatch({
      type: 'expenditure_draftform/changeConditionData',
      payload: {where}
    })
  }
    //状态列的显示文本构造函数
    function colTextRenderOfState(text, record) {
      if (!record.state) return '***';
      const options = stateOptions;
      const option = options.find((r) => r.key == text);
      if (option) {
        return option.name;
      }
      else {
        return '***';
      }
    }
    //项目名称 render
    function projectNameRender(text, record) {
      let categoryFullName = record && record.categoryFullName;
      let projectName = record.projectName;
      let nameArray = [];
      if (projectName && projectName.indexOf('/') >= 0) {
        nameArray = projectName.split('/');
      }
      if (categoryFullName && categoryFullName != '') {
        if (categoryFullName.indexOf('差旅费') >= 0) {
          if (nameArray.length >= 2) {
            let index = nameArray[1].indexOf('至');
            if (index > 0) {
              projectName = nameArray[0] + nameArray[1].substring(0, index) + '差旅费'
              return projectName
            }
          }
        }
        if (categoryFullName.indexOf('业务招待费') >= 0) {
          if (nameArray.length >= 3) {
            // projectName = nameArray[1] + nameArray[0].replace('至', '') + '业务招待费'
            let startTime=nameArray[0].substring(0,10)
            projectName = nameArray[1]+startTime + '业务招待费'
            return projectName
          }
        }
      }
  
      return projectName;
    }
      //科目编号构造
  function categoryNoRender(text, record) {
    let fullNo = record && record.categoryFullNo;
    if (!fullNo || fullNo == '')
      return '***';
    let index = fullNo.indexOf('.');
    if (index < 0)
      return fullNo;
    if (record.serialNo != null && record.serialNo != '') {
      return fullNo.substring(index + 1) + '.' + record.serialNo;
    } else {
      return fullNo.substring(index + 1);
    }

  }
}

import { connect } from 'dva';
export default connect(({
    expenditure_draftform:{conditionData},
    expenditure_executions,
    loading,
    apptabs:{tabs}
  }) =>
  ({
    conditionData,
    expenditure_executions, 
    loading: loading.models.expenditure_executions,
    tabs,
  })
)(ResultView);