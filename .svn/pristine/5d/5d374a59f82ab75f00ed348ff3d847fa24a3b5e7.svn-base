import React from 'react';
import {accountingNumberFormat} from 'utils';

import {View} from 'components';
import ResultStatInfo from '../../queryform/QueryForm/ViewGrid/ResultStatInfo';

import service from 'service';
import * as myService from '../service';

//取得模型名称
import modelDefinition from '../model';
const modelName = modelDefinition.namespace;

const ViewComponent = ( props ) => {
  //定义操作条属性
  const actionBarProps = {
    new: false, //显示新增按钮
    delete: false, //显示删除按钮
    newRow: false,
    newPayloadRender: () => {return {processNo:'contractFlow'}}
  }

  //获取当前用户id
  const userId=service.userInfo.user.id;

  let searchParam={ //搜索条件
    linkAttrs:[],
    filter: { //过滤规则
      clazz: 'Excution', //模型对应的后台实体类
      where: 'o.createdBy.id='+userId, //条件
    },
    size: 20, //指定每页记录数
    sort: 'o.createdTime,desc' //缺省排序规则
  }
  
  //定义列表属性
  const listProps = {
    columns:[ // 和antd table组件的列定义相同    
      { title: '编号', width: 100, dataIndex: 'projectNo', key: 'projectNo',link:'open',sorter:true },
      { title: '事项名称', dataIndex: 'projectName', key: 'projectName',link:'open',sorter:true },
      { title: '审批状态', width: 90, dataIndex: 'state', key: 'state',sorter:true, 
        textRender: myService.colTextRenderOfState,
        className: 'xpiui-view-col-center',
      },
      { title: '申请金额(元)', width: 120, dataIndex: 'budget', key: 'budget',sorter:true,
        textRender:(value) => {
          if (!value) return '***';
          return accountingNumberFormat(value);
        },
        className: 'xpiui-view-col-right',
      },                
      { title: '类型', width: 70, dataIndex: 'type', key: 'type' ,sorter:true,
        render: (val)=>val==1? '费用' : '合同',
        className: 'xpiui-view-col-center',
      },
      { title: '预算年度',width: 90, dataIndex: 'year', key: 'year',sorter:true,
        className: 'xpiui-view-col-center',
      }
    ],
    colDefaultLink: 'open',
  };

  //翻页器属性
  const paginationBarProps = {reloadButton:false};

  return (
    <div>
      <ResultStatInfo />
      <View key={'MyExecutionsView'} {...props}
        editMode='row' //编辑模式：单行编辑
        modelName={modelName} //模型名称
        searchParam={searchParam}
        actionBar={actionBarProps} //操作条定义
        list={listProps} //列表定义
        paginationBar={paginationBarProps}
        onSearch={handleOnWhereChange}
        onInitQuery={handleOnInitQuery}
      />
    </div>
  )

  //处理按钮条检索事件
  function handleOnWhereChange({where}) {
    //构造条件
    let searchWhere = searchParam&&searchParam.filter&&searchParam.filter.where;

    //发消息通知模型条件发生变化
    const conditionData = {where, searchWhere};

    props.dispatch({
      type: 'expenditure_queryform/statForQuery',
      payload: {conditionData}
    })
  }

  //处理初始请求数据事件
  function handleOnInitQuery({searchParam}) {
    let where = searchParam&&searchParam.filter&&searchParam.filter.where;
    //发消息通知模型进行初始统计
    props.dispatch({
      type: 'expenditure_queryform/statForQuery',
      payload: {conditionData:{where}}
    })
  }
}

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({expenditure_executions, loading, apptabs:{tabs}}) =>
  ({expenditure_executions, loading: loading.models[modelName], tabs})
)(ViewComponent);
