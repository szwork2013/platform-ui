import {routerRedux} from 'dva/router';
import {Progress} from 'antd';
import { View } from 'components';

import service from 'service';

//结果视图
const ListView = ( props ) => {
  const { dispatch} = props;
  //定义操作条属性
  const actionBarProps = false;

  //定义列表属性
    const listProps = {
      columns:[ // 和antd table组件的列定义相同
        { title: '编码',width:'50',dataIndex: '_category.no', key: '_category.no'},
        { title: '指标',width:'260', dataIndex: '_category.name', key: '_category.name', link: 'view'
        },
        {title: '值',width:'300',dataIndex: 'value', key: 'value',
          textRender: (text,record)=>getIndicatorValue(record)||'***'
        },
        { title: '责任部门', width:'100',dataIndex: 'deptName', key: 'deptName',
          textRender: deptTextRender
        },
        { title: '年度',width:'70', dataIndex: 'year', key: 'year'},
        { title: '月份',width:'70', dataIndex: 'month', key: 'month'},
        {title: '填报情况', dataIndex: 'fillinStatus', key: 'fillinStatus',
          textRender: fillinStatusRender
        },
      ],
    };

  //翻页器属性
  const paginationBarProps = false;

  return (
    <div>
      <View {...props}
        key="IndicatorReportView"
        modelName='indicator_monthlyindicator'
        notQueryData={true}
        actionBar={actionBarProps} //操作条定义
        list={listProps} //列表定义
        paginationBar={paginationBarProps}
        heightOffset={-40}
      />
    </div>
  )

  //指标名称显示构造函数
  function indicatorTextRender(value, record) {
    let color = 'black';
    if (!getIndicatorValue(record)) color = 'red';

    return(
      <span style={{color}}>
        {record._category.name}
      </span>
    )
  }

  //责任部门显示构造函数
  function deptTextRender(value, record) {
    let color = 'black';
    if (!getIndicatorValue(record)) color = 'red';

    return(
      <span style={{color}}>
        {record.deptName}
      </span>
    )
  }

  //填报状态显示构造函数
  function fillinStatusRender(value, record) {
    let deadlineDays = record.deadlineDays||-100;
    let delay = record._category.delay;
    deadlineDays = parseInt(deadlineDays)-delay;

    let percent = (30+deadlineDays)/30*100;
    percent = percent>100?100:percent;

    if (!getIndicatorValue(record)) {
      let info = percent==100?'逾期':'还有'+(0-deadlineDays)+'天';
      return (
        <span>
          <Progress showInfo={percent!=100?false:true} style={{width:160}} percent={percent} status={percent==100? "exception":"active"}/>
          {info}
        </span>
      )
    }

    let submitInfo = record.submitUserName+'于'+record.createdTime+'提交';
    return(
      <span>{submitInfo}</span>
    )
  }

  //从记录中获取填报的指标值
  function getIndicatorValue(record) {
    let value;
    let category = record._category||{};
    if(category.valueType==1){
       value = record.numberValue;
    }
    else if(category.valueType==2){
      if(category.initFormat == record.textValue){
        value = undefined;
      }else {
        value = record.textValue;
      }
    }
    return value;
  }
}

import { connect } from 'dva';
function mapStateToProps(state) {
  const { indicator_monthlyindicator } = state;
  return {
      loading: state.loading.models.indicator_monthlyindicator,
      indicator_monthlyindicator
  };
}
export default connect(mapStateToProps)(ListView);
