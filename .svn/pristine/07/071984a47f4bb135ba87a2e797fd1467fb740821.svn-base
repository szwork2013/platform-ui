import React from 'react';

import {Row, Col} from 'antd';

import { ModuleLayout } from 'components';

import CategoryTree from './CategoryTree'
import OptionsForm from './OptionsForm'
import ResultView from './ResultView'
import HelpPopover from './HelpPopover';
import ResultStatInfo from './ResultStatInfo';

import service from 'service';
import {constructBudgetSource} from '../service';

//取得模型名称
import modelDefinition from '../../execution/model';
const modelName = modelDefinition.namespace;

class DraftForm extends React.Component {
  //进入组件路由
  componentDidMount() {
   //解构参数
    const {
      dispatch,
      match,
    } = this.props;

    //获取支持性质
    const expenditureType = service.getRouteParam({match, paramName:'expenditureType'});
    if (!expenditureType) return;

    //初始化选项数据
    dispatch({ type: 'expenditure_draftform/initialize',payload:{expenditureType}});
  }

  render() {
    const props=this.props;
    const {
      conditionData,
      statInfo,
      match,
    } = props;

    //获取支出性质
    const expenditureType = service.getRouteParam({match, paramName:'expenditureType'});

    //计算组件的高度
    const layoutHeight = ModuleLayout.theme.content.height();
    let formHeight = 100;
    if (expenditureType) {
      formHeight = expenditureType=='infrastructure' ? 75:100;
     }
    if (conditionData.category&&conditionData.fundSource) {
      formHeight = expenditureType=='infrastructure' ? 40:80;
    }
    const treeHeight = layoutHeight - formHeight;

    const treeHelpVisble = conditionData.fundSource&&!conditionData.category;

    return (
      <Row>
        <Col span={4}>
          {/*选择项目或年度*/}
          <div style={{backgroundColor:'#ebf8f9',height:formHeight}}>
            <OptionsForm expenditureType={expenditureType}/>
          </div>
          {/*选择科目*/}
          <HelpPopover placement='top' content={'请选择科目'}
            visible={treeHelpVisble}
          >
            <div style={{width:'100%',position:'absolute',left:0,top:formHeight+15,height:1}}/>
          </HelpPopover>
          <div style={{backgroundColor:'#fbfbfb', height: treeHeight,overflow:'auto'}}>
            <CategoryTree expenditureType={expenditureType}/>
          </div>
        </Col>
        <Col span={20}>
          {/*显示资金用途*/}
          <Row style={{marginLeft:5, color:'#108ee9', padding:5}}>
            预算来源：{constructBudgetSource(conditionData)}
          </Row>
          {/*显示科目统计结果*/}
          <Row>
            <ResultStatInfo
              height={28}
              conditionData={conditionData}
              statInfo={statInfo}
            />
          </Row>
          {/*显示符合条件的记录*/}
          <ResultView
            expenditureType={expenditureType}
            modelName={modelName}
            heightOffset={-62}
          />
        </Col>
      </Row>
    )
  }
}

//连接模型(model)和组件，使模型变化时，组件属性也跟着变化，从而重新加载组件
import { connect } from 'dva';
export default connect(({
  expenditure_draftform:{conditionData, statInfo}
}) =>
  ({conditionData, statInfo})
)(DraftForm);