import React from 'react';
import { Collapse, Tabs, Icon, Badge, Button } from 'antd';
const Panel = Collapse.Panel;
const TabPane = Tabs.TabPane;

import { Form as FormLayout, FormItem } from 'components';
const FormContainer = FormLayout.FormContainer;
const Form = FormContainer.StyledForm;
const Row = FormContainer.StyledRow;

import service from 'service';
import wfservice from 'wfservice';
import materialService from '../../../server';

import TitleSection from '../../../common/TitleSection';
import PlanContent from '../../../common/PlanContent';
import PlanItems from '../../../common/PlanItems';
import Seal from '../../../common/Seal';
//权限定义表单
class DepartmentPlanForm extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      activeKey: '1',
    };
  }

  componentDidMount() {
    //解构参数
    let {
      model, //FormContainer注入：模型
      href,
      dispatch,
    } = this.props;
    let { record, state } = model;
    if (state.mode == 'new') {
      const user = service.userInfo.user;
      record.org = service.constructRecordUrl({ modelName: 'orgs', id: user.org.id });
      dispatch({
        type: 'department_plan/create',
        payload: {
          href: href,
          record: record,
          thenClose: false,
        }
      })
    }
  }

  render() {
    //解构参数
    let {
      model, //FormContainer注入：模型
      canEdit = true, //FormContainer注入：是否可编辑
      getFieldDecorator,
      setFieldsValue,
      dispatch,
      formCanEdit,
      ...rest,
    } = this.props;
    let { record, state } = model;

    canEdit = canEdit ? formCanEdit : false;
    //构造FormItem的公共参数
    const itemProps = {
      canEdit, required: canEdit,
      getFieldDecorator, setFieldsValue,
    };
    const itemWidth = ['96%', '10%', '90%'];

    //处理冲公司计划新增和编辑两种情况
    let demandPlan = record.demandPlanRecord;
    if (!demandPlan) {
      demandPlan = service.getRecordLinkAttr(record, 'demandPlan') || {};
    }
    //处理现实编报部门的信息
    let org = service.getRecordLinkAttr(record, 'org');
    demandPlan.orgName = (org && org.orgName) || '';

    let planContentProp = { record: demandPlan, canEdit: false, getFieldDecorator, setFieldsValue, dispatch, planType: 2, department: record };

    const user = service.userInfo.user;

    let planItemsProp = {
      record,
      canEdit,
      dispatch,
      year: demandPlan.year,
      type: demandPlan.type,
      planType: 2,
      mode: state.mode
    }
    let opinionsProp = {
      record,
      canEdit,
      dispatch,
      Type: demandPlan.type,
      mode: state.mode
    }
    let activeKey = this.state.activeKey;
    if (record._isComment)
      activeKey = '2';
    //显示UI
    return (
      <Tabs tabPosition='top' activeKey={activeKey}
        onChange={(activeKey) => { this.setState({ activeKey }); record._isComment = false; }}>
        <TabPane tab={<span><Icon type="folder" />表单</span>} key="1">
          <Form layout='inline'>
            <div style={{ display: 'none' }}>
              <FormItem type='Input' {...itemProps}
                title='公司需求计划' itemKey='type' initialValue={record.demandPlan || undefined}
              />
              <FormItem type='Input' {...itemProps}
                title='机构' itemKey='org' initialValue={record.org || service.constructRecordUrl({ modelName: 'orgs', id: user.org.id })}
              />
            </div>
            <TitleSection title={demandPlan.year + '年' + demandPlan.month + '月' + demandPlan.batchNo + '批次部门' + materialService.convertTypeToString(demandPlan.type) + '需求计划审批单'} />
            <PlanContent {...planContentProp}></PlanContent>
            <PlanItems {...planItemsProp} />
            <Seal record={record} />
          </Form>
        </TabPane>
        <TabPane key="2"
          tab={<span><Icon type="file-text" />批阅意见</span>}
        >
          <Form layout='inline'>
            <Row>
              <FormItem type='CommentView' {...itemProps} width={itemWidth}
                commentColumns={wfservice.getCommentColumns(record)}
              />
            </Row>
          </Form>
        </TabPane>
        <TabPane key="3"
          tab={<span><Icon type="star-o" />附件</span>}
        >
          <Form layout='inline'>
            <Row>
              <FormItem title='附件' type='Attachment' {...itemProps}
                itemKey='_files' link={service.getHrefOfLinkAttr(record)} mode={state.mode}
                multiple width={itemWidth}
              />
            </Row>
          </Form>
        </TabPane>
      </Tabs>
    );
  }
}
export default DepartmentPlanForm;
